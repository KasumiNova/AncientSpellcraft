

import org.apache.tools.ant.filters.ReplaceTokens

buildscript {
    repositories {
        maven { url = 'https://maven.minecraftforge.net' } // old url was 'https://files.minecraftforge.net/maven' 
        jcenter()
        mavenCentral()
        maven { url = "https://ajoberstar.org/bintray-backup/" }
    }
    dependencies {
        classpath 'net.minecraftforge.gradle:ForgeGradle:3.+'
        classpath 'org.ajoberstar.grgit:grgit-gradle:3.1.1'
    }
    
    repositories.each {
        if (it instanceof MavenArtifactRepository && it.url.toString() == "https://files.minecraftforge.net/maven") {
            it.url = "https://maven.minecraftforge.net"
        }
    }
}
        
apply plugin: 'net.minecraftforge.gradle'
// Only edit below this line, the above code adds and enables the necessary things for Forge to be setup.
apply plugin: 'idea'
apply plugin: 'maven-publish'
apply plugin: org.ajoberstar.grgit.gradle.GrgitPlugin


//// Project Settings ////
// http://maven.apache.org/guides/mini/guide-naming-conventions.html

group = "${project.maven_group}" // groupId
archivesBaseName = "${project.mod_id}" // artifactId - modid
version = "${project.mc_version}-${project.mod_version}"

//// Project Settings ////

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    // The mappings can be changed at any time, and must be in the following format.
    // snapshot_YYYYMMDD   Snapshot are built nightly.
    // stable_#            Stables are built at the discretion of the MCP team.
    // Use non-default mappings at your own risk. they may not always work.
    // Simply re-run your setup task after changing the mappings to update your workspace.
    //mappings channel: 'snapshot', version: '20171003-1.12'
    mappings channel: project.mappings_channel, version: "${project.mappings_version}-${project.mappings_mc_version}"
    // makeObfSourceJar = false // an Srg named sources jar is made by default. uncomment this to disable.
    
    // accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    // Default run configurations.
    // These can be tweaked, removed, or duplicated as needed.
    runs {
        client {
            workingDirectory project.file('run')

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
        }

        server {

            // Recommended logging data for a userdev environment
            property 'forge.logging.markers', 'SCAN,REGISTRIES,REGISTRYDUMP'

            // Recommended logging level for the console
            property 'forge.logging.console.level', 'info'
        }
    }
}

repositories {
    maven {
        name 'Curseforge Maven'
        url 'https://minecraft.curseforge.com/api/maven/'
    }
    maven { 
        url 'https://maven.blamejared.com' 
    }
     maven {
        url "https://www.cursemaven.com"
    }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "http://dvs1.progwml6.com/files/maven"
    }
    flatDir {
        // location for sources
        dirs 'libs'
    }
}

dependencies {
    //// MC version ////
    // Specify the version of Minecraft to use, If this is any group other then 'net.minecraft' it is assumed
    // that the dep is a ForgeGradle 'patcher' dependency. And it's patches will be applied.
    // The userdev artifact is a special name and will get all sorts of transformations applied to it.
    minecraft "net.minecraftforge:forge:${project.mc_version}-${project.forge_version}"
    //// MC version ////    
    

    // CurseForge Maven
    // Currently unused
    // CurseForge Maven usage: https://support.curseforge.com/en/support/solutions/articles/9000197321-curseforge-api
    // Format: compile '{projectSlug}:{mavenArtifact}:{mavenVersion}:{projectFileNameTag}'

    // CurseMaven - https://www.cursemaven.com/
    // Format: curse.maven:<descriptor>-<projectid>:<fileid>
    // Fields:
    // curse.maven -> Required. Marks the dependency to be resolved by the curse maven website.
    // <descriptor> -> Can be anything you want. This file downloaded will have this in it's name, so it's good to use this to show which files are what. A good practice would be to have this as the project slug.
    // <projectid> -> The project id of the file you want to add as a dependency.
    // <fileid> -> The file id of the file you want to add as a dependency.
    // Test link: https://www.cursemaven.com/test/<projectid>/<fileid>/<Classifier?>

    //// Dependencies ////

    implementation fg.deobf("curse.maven:ElectroblobsWizardry-${wizardry_projectid}:${wizardry_fileid}")
    implementation fg.deobf("curse.maven:baubles-${baubles_projectid}:${baubles_fileid}")
    //runtime "curse.maven:jei-${jei_projectid}:${jei_fileid}"
    implementation fg.deobf("mezz.jei:jei_${mc_version}:${jei_version}:api")
    implementation fg.deobf("curse.maven:artemislib-${artemislib_projectid}:${artemislib_fileid}")
    implementation fg.deobf("curse.maven:antique-atlas-${antiqueatlas_projectid}:${antiqueatlas_fileid}")

    //// Dependencies ////

    //// Forge examples ////
    // You may put jars on which you depend on in ./libs or you may define them like so..
    // compile "some.group:artifact:version:classifier"
    // compile "some.group:artifact:version"

    // Real examples
    // compile 'com.mod-buildcraft:buildcraft:6.0.8:dev'  // adds buildcraft to the dev env
    // compile 'com.googlecode.efficient-java-matrix-library:ejml:0.24' // adds ejml to the dev env

    // The 'provided' configuration is for optional dependencies that exist at compile-time but might not at runtime.
    // provided 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // These dependencies get remapped to your current MCP mappings
    // deobf 'com.mod-buildcraft:buildcraft:6.0.8:dev'

    // For more info...
    // http://www.gradle.org/docs/current/userguide/artifact_dependencies_tutorial.html
    // http://www.gradle.org/docs/current/userguide/dependency_management.html
    //// Forge examples ////

}

// (1.12.2 + FG3) resources issue fix by Gigaherz
sourceSets {
    main {
        output.resourcesDir = file('build/combined')
        java.outputDir = file('build/combined')
    }
}

//// Project manifest data ////

// Example for how to get properties into the manifest for reading by the runtime..
jar {
    manifest {
        attributes([
            "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": "WinDanesz",
            "Specification-Version": "1", // We are version 1 of ourselves
            "Implementation-Title": project.name,
            "Implementation-Version": "${version}",
            "Implementation-Vendor" :"WinDanesz",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-On": "${project.mc_version}-${project.forge_version}"
        ])
    }
}

task sourceJar(type: Jar, dependsOn: classes) {
    description = 'Creates a JAR containing the source code.'
    classifier = 'sources'
    from sourceSets.main.allSource
    manifest {
        attributes([
            "Maven-Artifact": "${project.maven_group}:${project.archivesBaseName}:${project.version}",
            "Specification-Title": archivesBaseName,
            "Specification-Vendor": "WinDanesz",
            "Specification-Version": "1",
            "Implementation-Title": archivesBaseName + '-sources',
            "Implementation-Version": "${project.mod_version}",
            "Implementation-Vendor": "WinDanesz",
            "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ"),
            "Built-On-Java": "${System.getProperty('java.vm.version')} (${System.getProperty('java.vm.vendor')})",
            "Built-On": "${project.mc_version}-${project.forge_version}"
        ])
    }
}

processResources {
    // this will ensure that this task is redone when the versions change.
    inputs.property "version", version.toString()
    inputs.property "mcversion", project.mc_version.toString()

    // replace stuff in mcmod.info, nothing else
    from(sourceSets.main.resources.srcDirs) {
        include 'mcmod.info'

        // replace version and mcversion
        expand 'version': version.toString(), 'mcversion': project.mc_version.toString()
    }

    // copy everything else except the mcmod.info
    from(sourceSets.main.resources.srcDirs) {
        exclude 'mcmod.info'
    }
}



//// Project manifest data ////

// Example configuration to allow publishing using the maven-publish task
// This is the preferred method to reobfuscate your jar file
jar.finalizedBy('reobfJar') 
// However if you are in a multi-project build, dev time needs unobfed jar files, so you can delay the obfuscation until publishing by doing
// publish.dependsOn('reobfJar')

//publishing {
//    repositories {
//        maven {
//            name = "GitHubPackages"
//            url = "https://maven.pkg.github.com/${project.github}"
//            credentials {
//                username = System.getenv("GITHUB_ACTOR")
//                password = System.getenv("GITHUB_TOKEN")
//            }
//        }
//    }
//    publications {
//        gpr(MavenPublication) {
//            artifactId archivesBaseName
//            from(components.java)
//        }
//    }
//}

// downloads the dependency sources from github into the libs folder
// Yes, I've forked some of them to properly tag their versions...
task downloadSources {
    doLast {
        mkdir "libs"
        def wizardry = new File("libs/WizardrySrc-${wizardry_version}.zip")
        new URL("https://github.com/Electroblob77/Wizardry/archive/${wizardry_version}.zip").withInputStream{ i -> wizardry.withOutputStream{ it << i }}

        def baubles = new File("libs/BaublesSrc-${baubles_version}.zip")
        new URL("https://github.com/WinDanesz/Baubles/archive/${baubles_version}.zip").withInputStream{ i -> baubles.withOutputStream{ it << i }}

        def artemislib = new File("libs/ArtemisLib-${artemislib_version}.zip")
        new URL("https://github.com/WinDanesz/ArtemisLib/archive/${artemislib_version}.zip").withInputStream{ i -> artemislib.withOutputStream{ it << i }}
    }
}

if (System.getenv('USE_ALPHAS').equals('true')) {
    println 'getenv'
    task setupGithubActions() {
        def getVersion = {
            //TAG-offset-hash
            def raw = grgit.describe(longDescr: true, tags: true, match: ["${project.mc_version}-[0-9].[0-9].[0-9]", "${project.mc_version}-[0-9][0-9].[0-9][0-9].[0-9][0-9]", "${project.mc_version}-[0-9].[0-9][0-9].[0-9][0-9]", "${project.mc_version}-[0-9].[0-9].[0-9][0-9]", "${project.mc_version}-[0-9].[0-9][0-9].[0-9]", "${project.mc_version}-[0-9][0-9].[0-9].[0-9]"])
            def desc = (raw == null ? '0.0-0-unknown' : grgit.describe(longDescr: true, tags: true, match: ["${project.mc_version}-[0-9].[0-9].[0-9]", "${project.mc_version}-[0-9][0-9].[0-9][0-9].[0-9][0-9]", "${project.mc_version}-[0-9].[0-9][0-9].[0-9][0-9]", "${project.mc_version}-[0-9].[0-9].[0-9][0-9]", "${project.mc_version}-[0-9].[0-9][0-9].[0-9]", "${project.mc_version}-[0-9][0-9].[0-9].[0-9]"])).split('-') as List
            def hash = desc.remove(desc.size() - 1)
            def offset = desc.remove(desc.size() - 1)
            def tag = desc.join('-')
            return "${tag}.${offset}".toString().replace("${project.mc_version}-", "") //Bake the response instead of making it dynamic
        }
        project.mod_version = getVersion();
        version = project.mc_version + '-' + getVersion();
        def getLastTag = {
            def raw = grgit.describe(longDescr: true, tags: true)
            def desc = (raw == null ? 'HEAD' : grgit.describe(longDescr: true, tags: true)).split('-') as List
            desc.remove(desc.size() - 1)
            desc.remove(desc.size() - 1)
            def tag = desc.join('-')
            return tag;
        }
        def rawLog = grgit.log(includes: ['HEAD'], excludes: [getLastTag()]);
        def log = "";
        for (org.ajoberstar.grgit.Commit commit: rawLog) {
            log = log + "[`" + commit.abbreviatedId + "`](https://github.com/${project.github}/commit/" + commit.id + ") " + commit.shortMessage + " - " + commit.author.name + "\\n";
        }
        doLast {
            exec {
                commandLine "echo", "##[set-output name=modid;]${project.mod_id}";
            }
            if(project.hasProperty('curse_project_id')) {
                exec {
                    commandLine "echo", "##[set-output name=project_id;]${project.curse_project_id}";
                }
                exec {
                    commandLine "echo", "##[set-output name=curse_title;]${project.curse_title}";
                }
                exec {
                    commandLine "echo", "##[set-output name=curse_versions;]${project.curse_versions}";
                }
                if(project.hasProperty('curse_relations')) {
                    exec {
                        commandLine "echo", "##[set-output name=curse_relations;]${project.curse_relations}";
                    }
                }
            }
            exec {
                commandLine "echo", "##[set-output name=version;]${project.version}";
            }
            exec {
                commandLine "echo", "##[set-output name=commitlog;]" + "{\"content\":\"" + (project.hasProperty('hook_content') ? project.hook_content : "") + "\",\"embeds\":[{\"author\":{\"name\":\"WinDanesz\",\"url\":\"https://www.curseforge.com/minecraft/mc-mods/ancient-spellcraft\",\"icon_url\":\"https://avatars.githubusercontent.com/u/31292708?s=48&v=4\"},\"title\":\"${project.mod_id}-alpha-${project.version}\",\"url\":\"https://github.com/${project.github}/releases/tag/alpha-${project.version}\",\"color\":14700288,\"description\":\"" + log + "\"}]}";
            }
        }
    }
} else {
    task setupGithubActions() {
        doLast {
            exec {
                commandLine "echo", "##[set-output name=modid;]${project.mod_id}";
            }
            if(project.hasProperty('curse_project_id')) {
                exec {
                    commandLine "echo", "##[set-output name=project_id;]${project.curse_project_id}";
                }
                exec {
                    commandLine "echo", "##[set-output name=curse_title;]${project.curse_title}";
                }
                exec {
                    commandLine "echo", "##[set-output name=curse_versions;]${project.curse_versions}";
                }
                if(project.hasProperty('curse_relations')) {
                    exec {
                        commandLine "echo", "##[set-output name=curse_relations;]${project.curse_relations}";
                    }
                }
            }
            exec {
                commandLine "echo", "##[set-output name=version;]${project.version}";
            }
        }
    }
    version = "${project.mc_version}-${project.mod_version}"
}

// replace @TOKENS@ in main file
task replaceTokens(type: Sync) {
    println 'replaceTokens'
    from sourceSets.main.java
    inputs.property 'version', project.mc_version.toString()
    filter(ReplaceTokens, tokens: [VERSION: version.toString()])
    filter(ReplaceTokens, tokens: [MCVERSION: "${project.mc_version}".toString()])
    filter(ReplaceTokens, tokens: [WIZARDRY_VERSION: "${project.wizardry_version}".toString()])
    into "$buildDir/src"
}

compileJava {
    source = replaceTokens.outputs
}