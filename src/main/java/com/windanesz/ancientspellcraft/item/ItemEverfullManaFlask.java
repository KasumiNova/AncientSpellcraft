package com.windanesz.ancientspellcraft.item;import com.windanesz.ancientspellcraft.registry.AncientSpellcraftItems;import electroblob.wizardry.Wizardry;import electroblob.wizardry.constants.Constants;import electroblob.wizardry.item.IManaStoringItem;import electroblob.wizardry.item.ItemArtefact;import net.minecraft.client.util.ITooltipFlag;import net.minecraft.entity.Entity;import net.minecraft.entity.EntityLivingBase;import net.minecraft.entity.player.EntityPlayer;import net.minecraft.item.EnumRarity;import net.minecraft.item.IItemPropertyGetter;import net.minecraft.item.ItemStack;import net.minecraft.util.ActionResult;import net.minecraft.util.EnumActionResult;import net.minecraft.util.EnumHand;import net.minecraft.util.ResourceLocation;import net.minecraft.util.text.TextComponentTranslation;import net.minecraft.world.World;import net.minecraftforge.fml.relauncher.Side;import net.minecraftforge.fml.relauncher.SideOnly;import javax.annotation.Nullable;import java.util.List;public class ItemEverfullManaFlask extends ItemASArtefact implements IManaStoringItem {	private static final int MANA_CAPACITY = 1400;	private static final int MANA_REGEN = 3;	public ItemEverfullManaFlask(EnumRarity rarity, Type type) {		super(rarity, type);		this.setMaxDamage(MANA_CAPACITY);		this.addPropertyOverride(new ResourceLocation("mana"), new IItemPropertyGetter() {			@SideOnly(Side.CLIENT)			public float apply(ItemStack stack, @Nullable World worldIn, @Nullable EntityLivingBase entityIn) {				return (float) getMana(stack) / MANA_CAPACITY;			}		});	}	@Override	public ActionResult<ItemStack> onItemRightClick(World world, EntityPlayer player, EnumHand hand) {		if (hand == EnumHand.OFF_HAND) {			ItemStack flask = player.getHeldItemOffhand();			ItemStack mainhandStack = player.getHeldItemMainhand();			if (mainhandStack.getItem() instanceof IManaStoringItem) {				IManaStoringItem manaStoringItem = (IManaStoringItem) mainhandStack.getItem();				int capacity = this.getManaCapacity(flask);				int currMana = this.getMana(flask);				int amount = currMana >= (capacity / 10) ? (capacity / 10) : currMana;				int missingMana = manaStoringItem.getManaCapacity(mainhandStack) - manaStoringItem.getMana(mainhandStack);				if (missingMana < amount)					amount = missingMana;				manaStoringItem.rechargeMana(mainhandStack, amount);				this.consumeMana(flask, amount, player);				return new ActionResult<>(EnumActionResult.SUCCESS, flask);			} else if (!player.world.isRemote) {				player.sendStatusMessage(new TextComponentTranslation("item." + this.getRegistryName() + ".invalid_use"), true);				return new ActionResult<>(EnumActionResult.FAIL, player.getHeldItem(hand));			}		}		if (!player.world.isRemote)			player.sendStatusMessage(new TextComponentTranslation("item." + this.getRegistryName() + ".invalid_use"), true);		return new ActionResult<>(EnumActionResult.FAIL, player.getHeldItem(hand));	}	@Override	public void onUpdate(ItemStack stack, World world, Entity entity, int slot, boolean isHeld) {		// no hijacking of the max active charm artefact count!		if (entity instanceof EntityPlayer && ItemArtefact.isArtefactActive((EntityPlayer) entity, AncientSpellcraftItems.charm_mana_flask)) {			if (!world.isRemote && !this.isManaFull(stack) && world.getTotalWorldTime() % Constants.CONDENSER_TICK_INTERVAL == 0) {				this.rechargeMana(stack, MANA_REGEN);			}		}	}	@Override	public void setMana(ItemStack stack, int mana) {		// Using super (which can only be done from in here) bypasses the above override		super.setDamage(stack, getManaCapacity(stack) - mana);	}	@Override	public int getMana(ItemStack stack) {		return getManaCapacity(stack) - getDamage(stack);	}	@Override	public int getManaCapacity(ItemStack stack) {		return this.getMaxDamage(stack);	}	@Override	@SideOnly(Side.CLIENT)	public void addInformation(ItemStack stack, @Nullable World worldIn, List<String> text, ITooltipFlag flagIn) {		super.addInformation(stack, worldIn, text, flagIn);		text.add("\u00A79" + net.minecraft.client.resources.I18n.format("item." + Wizardry.MODID + ":wand.mana",				this.getMana(stack), this.getManaCapacity(stack)));	}	public boolean showDurabilityBar(ItemStack stack) {		return false;	}}